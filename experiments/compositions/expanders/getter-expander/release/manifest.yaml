# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: getterconfigurations.composition.google.com
spec:
  group: composition.google.com
  names:
    kind: GetterConfiguration
    listKind: GetterConfigurationList
    plural: getterconfigurations
    singular: getterconfiguration
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GetterConfiguration is the Schema for the getters API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: GetterConfigurationSpec defines the desired state of GetterConfiguration
            properties:
              valuesFrom:
                items:
                  properties:
                    fieldRef:
                      items:
                        properties:
                          as:
                            type: string
                          path:
                            type: string
                        required:
                        - as
                        - path
                        type: object
                      type: array
                    name:
                      type: string
                    resourceRef:
                      properties:
                        group:
                          description: OPTION 2
                          type: string
                        kind:
                          type: string
                        name:
                          description: OneOf validation added for Name and NameSuffix
                          type: string
                        nameSuffix:
                          type: string
                        resource:
                          type: string
                        version:
                          type: string
                      required:
                      - kind
                      - resource
                      type: object
                  required:
                  - fieldRef
                  - name
                  - resourceRef
                  type: object
                type: array
            type: object
          status:
            description: GetterConfigurationStatus defines the observed state of GetterConfiguration
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: composition
    app.kubernetes.io/instance: getter-expander-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: composition
  name: composition-getter-expander
  namespace: composition-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: composition-getter-expander
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: composition
    app.kubernetes.io/instance: getter-expander-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: composition
  name: composition-getter-expander-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: composition-getter-expander
subjects:
- kind: ServiceAccount
  name: composition-getter-expander
  namespace: composition-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: expanders
    app.kubernetes.io/created-by: composition
    app.kubernetes.io/instance: getter-v0.0.1
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: composition
    control-plane: expander-getter
  name: composition-getter-v0-0-1
  namespace: composition-system
spec:
  ports:
  - name: grpc
    port: 8443
    protocol: TCP
    targetPort: 8443
  selector:
    control-plane: expander-getter-v0.0.1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: expanders
    app.kubernetes.io/created-by: composition
    app.kubernetes.io/instance: getter-v0.0.1
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: composition
    control-plane: expander-getter-v0.0.1
  name: composition-getter-v0.0.1
  namespace: composition-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: expander-getter-v0.0.1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: expander
      labels:
        control-plane: expander-getter-v0.0.1
    spec:
      containers:
      - args:
        - --port=8443
        command:
        - /expander
        image: gcr.io/krmapihosting-release/expander-getter:v0.0.1
        name: getter
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      serviceAccountName: composition-getter-expander
      terminationGracePeriodSeconds: 10
---
apiVersion: composition.google.com/v1alpha1
kind: ExpanderVersion
metadata:
  name: composition-getter
  namespace: composition-system
spec:
  config:
    group: composition.google.com
    kind: GetterConfiguration
    version: v1alpha1
  type: grpc
  validVersions:
  - v0.0.1
